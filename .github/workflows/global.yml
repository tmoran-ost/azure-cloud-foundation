name: "Azure Cloud Foundation Global"

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  id-token: write
  contents: read

jobs:
  tf-ci:
    name: "Terraform PR Validation"
    runs-on: ubuntu-latest
    environment: azure
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_LOG: INFO
    permissions:
      pull-requests: write
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./tf/env/global/foundation

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.6
      - name: Check Env
        run: env

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Artifacts Directory
        run: mkdir -p artifacts

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -out=terraform_plan -no-color 
        continue-on-error: true


      - name: Upload Artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: terraform_plan
          path: tf/env/global/foundation/terraform_plan
      

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details>
            
            <summary>Show Prod Plan</summary>\n

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            Pushed by: @${{ github.actor }}, Action: ${{ github.event_name }}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Download Artifact
        if: github.event_name == 'pull_request'
        uses: actions/download-artifact@v3
        with:
          name: terraform_plan
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply terraform_plan